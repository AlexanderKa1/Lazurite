//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "PyriteService")]
public interface PyriteService
{

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/PyriteService/GetCurrentUser", ReplyAction = "http://tempuri.org/PyriteService/GetCurrentUserResponse")]
    System.IAsyncResult BeginGetCurrentUser(System.AsyncCallback callback, object asyncState);

    Pyrite.MainDomain.UserBase EndGetCurrentUser(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/PyriteService/CalculateScenarioValue", ReplyAction = "http://tempuri.org/PyriteService/CalculateScenarioValueResponse")]
    System.IAsyncResult BeginCalculateScenarioValue(string scenarioId, System.AsyncCallback callback, object asyncState);

    string EndCalculateScenarioValue(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/PyriteService/ExecuteScenario", ReplyAction = "http://tempuri.org/PyriteService/ExecuteScenarioResponse")]
    System.IAsyncResult BeginExecuteScenario(string scenarioId, string value, System.AsyncCallback callback, object asyncState);

    void EndExecuteScenario(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/PyriteService/ExecuteScenarioAsync", ReplyAction = "http://tempuri.org/PyriteService/ExecuteScenarioAsyncResponse")]
    System.IAsyncResult BeginExecuteScenarioAsync(string scenarioId, string value, System.AsyncCallback callback, object asyncState);

    void EndExecuteScenarioAsync(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/PyriteService/ExecuteScenarioAsyncParallel", ReplyAction = "http://tempuri.org/PyriteService/ExecuteScenarioAsyncParallelResponse")]
    System.IAsyncResult BeginExecuteScenarioAsyncParallel(string scenarioId, string value, System.AsyncCallback callback, object asyncState);

    void EndExecuteScenarioAsyncParallel(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/PyriteService/GetChangedScenarios", ReplyAction = "http://tempuri.org/PyriteService/GetChangedScenariosResponse")]
    System.IAsyncResult BeginGetChangedScenarios(System.DateTime since, System.AsyncCallback callback, object asyncState);

    Pyrite.MainDomain.ScenarioInfoLW[] EndGetChangedScenarios(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/PyriteService/GetScenarioInfo", ReplyAction = "http://tempuri.org/PyriteService/GetScenarioInfoResponse")]
    System.IAsyncResult BeginGetScenarioInfo(string scenarioId, System.AsyncCallback callback, object asyncState);

    Pyrite.MainDomain.ScenarioInfo EndGetScenarioInfo(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/PyriteService/GetScenariosInfo", ReplyAction = "http://tempuri.org/PyriteService/GetScenariosInfoResponse")]
    System.IAsyncResult BeginGetScenariosInfo(System.AsyncCallback callback, object asyncState);

    Pyrite.MainDomain.ScenarioInfo[] EndGetScenariosInfo(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/PyriteService/GetScenarioValue", ReplyAction = "http://tempuri.org/PyriteService/GetScenarioValueResponse")]
    System.IAsyncResult BeginGetScenarioValue(string scenarioId, System.AsyncCallback callback, object asyncState);

    string EndGetScenarioValue(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/PyriteService/IsScenarioValueChanged", ReplyAction = "http://tempuri.org/PyriteService/IsScenarioValueChangedResponse")]
    System.IAsyncResult BeginIsScenarioValueChanged(string scenarioId, string lastKnownValue, System.AsyncCallback callback, object asyncState);

    bool EndIsScenarioValueChanged(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface PyriteServiceChannel : PyriteService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetCurrentUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public GetCurrentUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public Pyrite.MainDomain.UserBase Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((Pyrite.MainDomain.UserBase)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CalculateScenarioValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public CalculateScenarioValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public string Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetChangedScenariosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public GetChangedScenariosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public Pyrite.MainDomain.ScenarioInfoLW[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((Pyrite.MainDomain.ScenarioInfoLW[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetScenarioInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public GetScenarioInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public Pyrite.MainDomain.ScenarioInfo Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((Pyrite.MainDomain.ScenarioInfo)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetScenariosInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public GetScenariosInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public Pyrite.MainDomain.ScenarioInfo[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((Pyrite.MainDomain.ScenarioInfo[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetScenarioValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public GetScenarioValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public string Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class IsScenarioValueChangedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public IsScenarioValueChangedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public bool Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class PyriteServiceClient : System.ServiceModel.ClientBase<PyriteService>, PyriteService
{

    private BeginOperationDelegate onBeginGetCurrentUserDelegate;

    private EndOperationDelegate onEndGetCurrentUserDelegate;

    private System.Threading.SendOrPostCallback onGetCurrentUserCompletedDelegate;

    private BeginOperationDelegate onBeginCalculateScenarioValueDelegate;

    private EndOperationDelegate onEndCalculateScenarioValueDelegate;

    private System.Threading.SendOrPostCallback onCalculateScenarioValueCompletedDelegate;

    private BeginOperationDelegate onBeginExecuteScenarioDelegate;

    private EndOperationDelegate onEndExecuteScenarioDelegate;

    private System.Threading.SendOrPostCallback onExecuteScenarioCompletedDelegate;

    private BeginOperationDelegate onBeginExecuteScenarioAsyncDelegate;

    private EndOperationDelegate onEndExecuteScenarioAsyncDelegate;

    private System.Threading.SendOrPostCallback onExecuteScenarioAsyncCompletedDelegate;

    private BeginOperationDelegate onBeginExecuteScenarioAsyncParallelDelegate;

    private EndOperationDelegate onEndExecuteScenarioAsyncParallelDelegate;

    private System.Threading.SendOrPostCallback onExecuteScenarioAsyncParallelCompletedDelegate;

    private BeginOperationDelegate onBeginGetChangedScenariosDelegate;

    private EndOperationDelegate onEndGetChangedScenariosDelegate;

    private System.Threading.SendOrPostCallback onGetChangedScenariosCompletedDelegate;

    private BeginOperationDelegate onBeginGetScenarioInfoDelegate;

    private EndOperationDelegate onEndGetScenarioInfoDelegate;

    private System.Threading.SendOrPostCallback onGetScenarioInfoCompletedDelegate;

    private BeginOperationDelegate onBeginGetScenariosInfoDelegate;

    private EndOperationDelegate onEndGetScenariosInfoDelegate;

    private System.Threading.SendOrPostCallback onGetScenariosInfoCompletedDelegate;

    private BeginOperationDelegate onBeginGetScenarioValueDelegate;

    private EndOperationDelegate onEndGetScenarioValueDelegate;

    private System.Threading.SendOrPostCallback onGetScenarioValueCompletedDelegate;

    private BeginOperationDelegate onBeginIsScenarioValueChangedDelegate;

    private EndOperationDelegate onEndIsScenarioValueChangedDelegate;

    private System.Threading.SendOrPostCallback onIsScenarioValueChangedCompletedDelegate;

    private BeginOperationDelegate onBeginOpenDelegate;

    private EndOperationDelegate onEndOpenDelegate;

    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;

    private BeginOperationDelegate onBeginCloseDelegate;

    private EndOperationDelegate onEndCloseDelegate;

    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;

    public PyriteServiceClient()
    {
    }

    public PyriteServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
    {
    }

    public PyriteServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public PyriteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public PyriteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
    {
    }

    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }

    public event System.EventHandler<GetCurrentUserCompletedEventArgs> GetCurrentUserCompleted;

    public event System.EventHandler<CalculateScenarioValueCompletedEventArgs> CalculateScenarioValueCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExecuteScenarioCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExecuteScenarioAsyncCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExecuteScenarioAsyncParallelCompleted;

    public event System.EventHandler<GetChangedScenariosCompletedEventArgs> GetChangedScenariosCompleted;

    public event System.EventHandler<GetScenarioInfoCompletedEventArgs> GetScenarioInfoCompleted;

    public event System.EventHandler<GetScenariosInfoCompletedEventArgs> GetScenariosInfoCompleted;

    public event System.EventHandler<GetScenarioValueCompletedEventArgs> GetScenarioValueCompleted;

    public event System.EventHandler<IsScenarioValueChangedCompletedEventArgs> IsScenarioValueChangedCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult PyriteService.BeginGetCurrentUser(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetCurrentUser(callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    Pyrite.MainDomain.UserBase PyriteService.EndGetCurrentUser(System.IAsyncResult result)
    {
        return base.Channel.EndGetCurrentUser(result);
    }

    private System.IAsyncResult OnBeginGetCurrentUser(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((PyriteService)(this)).BeginGetCurrentUser(callback, asyncState);
    }

    private object[] OnEndGetCurrentUser(System.IAsyncResult result)
    {
        Pyrite.MainDomain.UserBase retVal = ((PyriteService)(this)).EndGetCurrentUser(result);
        return new object[] {
                retVal};
    }

    private void OnGetCurrentUserCompleted(object state)
    {
        if ((this.GetCurrentUserCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetCurrentUserCompleted(this, new GetCurrentUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void GetCurrentUserAsync()
    {
        this.GetCurrentUserAsync(null);
    }

    public void GetCurrentUserAsync(object userState)
    {
        if ((this.onBeginGetCurrentUserDelegate == null))
        {
            this.onBeginGetCurrentUserDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentUser);
        }
        if ((this.onEndGetCurrentUserDelegate == null))
        {
            this.onEndGetCurrentUserDelegate = new EndOperationDelegate(this.OnEndGetCurrentUser);
        }
        if ((this.onGetCurrentUserCompletedDelegate == null))
        {
            this.onGetCurrentUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentUserCompleted);
        }
        base.InvokeAsync(this.onBeginGetCurrentUserDelegate, null, this.onEndGetCurrentUserDelegate, this.onGetCurrentUserCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult PyriteService.BeginCalculateScenarioValue(string scenarioId, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginCalculateScenarioValue(scenarioId, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    string PyriteService.EndCalculateScenarioValue(System.IAsyncResult result)
    {
        return base.Channel.EndCalculateScenarioValue(result);
    }

    private System.IAsyncResult OnBeginCalculateScenarioValue(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string scenarioId = ((string)(inValues[0]));
        return ((PyriteService)(this)).BeginCalculateScenarioValue(scenarioId, callback, asyncState);
    }

    private object[] OnEndCalculateScenarioValue(System.IAsyncResult result)
    {
        string retVal = ((PyriteService)(this)).EndCalculateScenarioValue(result);
        return new object[] {
                retVal};
    }

    private void OnCalculateScenarioValueCompleted(object state)
    {
        if ((this.CalculateScenarioValueCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CalculateScenarioValueCompleted(this, new CalculateScenarioValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void CalculateScenarioValueAsync(string scenarioId)
    {
        this.CalculateScenarioValueAsync(scenarioId, null);
    }

    public void CalculateScenarioValueAsync(string scenarioId, object userState)
    {
        if ((this.onBeginCalculateScenarioValueDelegate == null))
        {
            this.onBeginCalculateScenarioValueDelegate = new BeginOperationDelegate(this.OnBeginCalculateScenarioValue);
        }
        if ((this.onEndCalculateScenarioValueDelegate == null))
        {
            this.onEndCalculateScenarioValueDelegate = new EndOperationDelegate(this.OnEndCalculateScenarioValue);
        }
        if ((this.onCalculateScenarioValueCompletedDelegate == null))
        {
            this.onCalculateScenarioValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCalculateScenarioValueCompleted);
        }
        base.InvokeAsync(this.onBeginCalculateScenarioValueDelegate, new object[] {
                    scenarioId}, this.onEndCalculateScenarioValueDelegate, this.onCalculateScenarioValueCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult PyriteService.BeginExecuteScenario(string scenarioId, string value, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginExecuteScenario(scenarioId, value, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void PyriteService.EndExecuteScenario(System.IAsyncResult result)
    {
        base.Channel.EndExecuteScenario(result);
    }

    private System.IAsyncResult OnBeginExecuteScenario(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string scenarioId = ((string)(inValues[0]));
        string value = ((string)(inValues[1]));
        return ((PyriteService)(this)).BeginExecuteScenario(scenarioId, value, callback, asyncState);
    }

    private object[] OnEndExecuteScenario(System.IAsyncResult result)
    {
        ((PyriteService)(this)).EndExecuteScenario(result);
        return null;
    }

    private void OnExecuteScenarioCompleted(object state)
    {
        if ((this.ExecuteScenarioCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ExecuteScenarioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult PyriteService.BeginExecuteScenarioAsync(string scenarioId, string value, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginExecuteScenarioAsync(scenarioId, value, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void PyriteService.EndExecuteScenarioAsync(System.IAsyncResult result)
    {
        base.Channel.EndExecuteScenarioAsync(result);
    }

    private System.IAsyncResult OnBeginExecuteScenarioAsync(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string scenarioId = ((string)(inValues[0]));
        string value = ((string)(inValues[1]));
        return ((PyriteService)(this)).BeginExecuteScenarioAsync(scenarioId, value, callback, asyncState);
    }

    private object[] OnEndExecuteScenarioAsync(System.IAsyncResult result)
    {
        ((PyriteService)(this)).EndExecuteScenarioAsync(result);
        return null;
    }

    private void OnExecuteScenarioAsyncCompleted(object state)
    {
        if ((this.ExecuteScenarioAsyncCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ExecuteScenarioAsyncCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void ExecuteScenarioAsyncAsync(string scenarioId, string value)
    {
        this.ExecuteScenarioAsyncAsync(scenarioId, value, null);
    }

    public void ExecuteScenarioAsyncAsync(string scenarioId, string value, object userState)
    {
        if ((this.onBeginExecuteScenarioAsyncDelegate == null))
        {
            this.onBeginExecuteScenarioAsyncDelegate = new BeginOperationDelegate(this.OnBeginExecuteScenarioAsync);
        }
        if ((this.onEndExecuteScenarioAsyncDelegate == null))
        {
            this.onEndExecuteScenarioAsyncDelegate = new EndOperationDelegate(this.OnEndExecuteScenarioAsync);
        }
        if ((this.onExecuteScenarioAsyncCompletedDelegate == null))
        {
            this.onExecuteScenarioAsyncCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteScenarioAsyncCompleted);
        }
        base.InvokeAsync(this.onBeginExecuteScenarioAsyncDelegate, new object[] {
                    scenarioId,
                    value}, this.onEndExecuteScenarioAsyncDelegate, this.onExecuteScenarioAsyncCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult PyriteService.BeginExecuteScenarioAsyncParallel(string scenarioId, string value, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginExecuteScenarioAsyncParallel(scenarioId, value, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void PyriteService.EndExecuteScenarioAsyncParallel(System.IAsyncResult result)
    {
        base.Channel.EndExecuteScenarioAsyncParallel(result);
    }

    private System.IAsyncResult OnBeginExecuteScenarioAsyncParallel(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string scenarioId = ((string)(inValues[0]));
        string value = ((string)(inValues[1]));
        return ((PyriteService)(this)).BeginExecuteScenarioAsyncParallel(scenarioId, value, callback, asyncState);
    }

    private object[] OnEndExecuteScenarioAsyncParallel(System.IAsyncResult result)
    {
        ((PyriteService)(this)).EndExecuteScenarioAsyncParallel(result);
        return null;
    }

    private void OnExecuteScenarioAsyncParallelCompleted(object state)
    {
        if ((this.ExecuteScenarioAsyncParallelCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ExecuteScenarioAsyncParallelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void ExecuteScenarioAsyncParallelAsync(string scenarioId, string value)
    {
        this.ExecuteScenarioAsyncParallelAsync(scenarioId, value, null);
    }

    public void ExecuteScenarioAsyncParallelAsync(string scenarioId, string value, object userState)
    {
        if ((this.onBeginExecuteScenarioAsyncParallelDelegate == null))
        {
            this.onBeginExecuteScenarioAsyncParallelDelegate = new BeginOperationDelegate(this.OnBeginExecuteScenarioAsyncParallel);
        }
        if ((this.onEndExecuteScenarioAsyncParallelDelegate == null))
        {
            this.onEndExecuteScenarioAsyncParallelDelegate = new EndOperationDelegate(this.OnEndExecuteScenarioAsyncParallel);
        }
        if ((this.onExecuteScenarioAsyncParallelCompletedDelegate == null))
        {
            this.onExecuteScenarioAsyncParallelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteScenarioAsyncParallelCompleted);
        }
        base.InvokeAsync(this.onBeginExecuteScenarioAsyncParallelDelegate, new object[] {
                    scenarioId,
                    value}, this.onEndExecuteScenarioAsyncParallelDelegate, this.onExecuteScenarioAsyncParallelCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult PyriteService.BeginGetChangedScenarios(System.DateTime since, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetChangedScenarios(since, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    Pyrite.MainDomain.ScenarioInfoLW[] PyriteService.EndGetChangedScenarios(System.IAsyncResult result)
    {
        return base.Channel.EndGetChangedScenarios(result);
    }

    private System.IAsyncResult OnBeginGetChangedScenarios(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        System.DateTime since = ((System.DateTime)(inValues[0]));
        return ((PyriteService)(this)).BeginGetChangedScenarios(since, callback, asyncState);
    }

    private object[] OnEndGetChangedScenarios(System.IAsyncResult result)
    {
        Pyrite.MainDomain.ScenarioInfoLW[] retVal = ((PyriteService)(this)).EndGetChangedScenarios(result);
        return new object[] {
                retVal};
    }

    private void OnGetChangedScenariosCompleted(object state)
    {
        if ((this.GetChangedScenariosCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetChangedScenariosCompleted(this, new GetChangedScenariosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void GetChangedScenariosAsync(System.DateTime since)
    {
        this.GetChangedScenariosAsync(since, null);
    }

    public void GetChangedScenariosAsync(System.DateTime since, object userState)
    {
        if ((this.onBeginGetChangedScenariosDelegate == null))
        {
            this.onBeginGetChangedScenariosDelegate = new BeginOperationDelegate(this.OnBeginGetChangedScenarios);
        }
        if ((this.onEndGetChangedScenariosDelegate == null))
        {
            this.onEndGetChangedScenariosDelegate = new EndOperationDelegate(this.OnEndGetChangedScenarios);
        }
        if ((this.onGetChangedScenariosCompletedDelegate == null))
        {
            this.onGetChangedScenariosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetChangedScenariosCompleted);
        }
        base.InvokeAsync(this.onBeginGetChangedScenariosDelegate, new object[] {
                    since}, this.onEndGetChangedScenariosDelegate, this.onGetChangedScenariosCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult PyriteService.BeginGetScenarioInfo(string scenarioId, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetScenarioInfo(scenarioId, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    Pyrite.MainDomain.ScenarioInfo PyriteService.EndGetScenarioInfo(System.IAsyncResult result)
    {
        return base.Channel.EndGetScenarioInfo(result);
    }

    private System.IAsyncResult OnBeginGetScenarioInfo(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string scenarioId = ((string)(inValues[0]));
        return ((PyriteService)(this)).BeginGetScenarioInfo(scenarioId, callback, asyncState);
    }

    private object[] OnEndGetScenarioInfo(System.IAsyncResult result)
    {
        Pyrite.MainDomain.ScenarioInfo retVal = ((PyriteService)(this)).EndGetScenarioInfo(result);
        return new object[] {
                retVal};
    }

    private void OnGetScenarioInfoCompleted(object state)
    {
        if ((this.GetScenarioInfoCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetScenarioInfoCompleted(this, new GetScenarioInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void GetScenarioInfoAsync(string scenarioId)
    {
        this.GetScenarioInfoAsync(scenarioId, null);
    }

    public void GetScenarioInfoAsync(string scenarioId, object userState)
    {
        if ((this.onBeginGetScenarioInfoDelegate == null))
        {
            this.onBeginGetScenarioInfoDelegate = new BeginOperationDelegate(this.OnBeginGetScenarioInfo);
        }
        if ((this.onEndGetScenarioInfoDelegate == null))
        {
            this.onEndGetScenarioInfoDelegate = new EndOperationDelegate(this.OnEndGetScenarioInfo);
        }
        if ((this.onGetScenarioInfoCompletedDelegate == null))
        {
            this.onGetScenarioInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScenarioInfoCompleted);
        }
        base.InvokeAsync(this.onBeginGetScenarioInfoDelegate, new object[] {
                    scenarioId}, this.onEndGetScenarioInfoDelegate, this.onGetScenarioInfoCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult PyriteService.BeginGetScenariosInfo(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetScenariosInfo(callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    Pyrite.MainDomain.ScenarioInfo[] PyriteService.EndGetScenariosInfo(System.IAsyncResult result)
    {
        return base.Channel.EndGetScenariosInfo(result);
    }

    private System.IAsyncResult OnBeginGetScenariosInfo(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((PyriteService)(this)).BeginGetScenariosInfo(callback, asyncState);
    }

    private object[] OnEndGetScenariosInfo(System.IAsyncResult result)
    {
        Pyrite.MainDomain.ScenarioInfo[] retVal = ((PyriteService)(this)).EndGetScenariosInfo(result);
        return new object[] {
                retVal};
    }

    private void OnGetScenariosInfoCompleted(object state)
    {
        if ((this.GetScenariosInfoCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetScenariosInfoCompleted(this, new GetScenariosInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void GetScenariosInfoAsync()
    {
        this.GetScenariosInfoAsync(null);
    }

    public void GetScenariosInfoAsync(object userState)
    {
        if ((this.onBeginGetScenariosInfoDelegate == null))
        {
            this.onBeginGetScenariosInfoDelegate = new BeginOperationDelegate(this.OnBeginGetScenariosInfo);
        }
        if ((this.onEndGetScenariosInfoDelegate == null))
        {
            this.onEndGetScenariosInfoDelegate = new EndOperationDelegate(this.OnEndGetScenariosInfo);
        }
        if ((this.onGetScenariosInfoCompletedDelegate == null))
        {
            this.onGetScenariosInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScenariosInfoCompleted);
        }
        base.InvokeAsync(this.onBeginGetScenariosInfoDelegate, null, this.onEndGetScenariosInfoDelegate, this.onGetScenariosInfoCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult PyriteService.BeginGetScenarioValue(string scenarioId, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetScenarioValue(scenarioId, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    string PyriteService.EndGetScenarioValue(System.IAsyncResult result)
    {
        return base.Channel.EndGetScenarioValue(result);
    }

    private System.IAsyncResult OnBeginGetScenarioValue(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string scenarioId = ((string)(inValues[0]));
        return ((PyriteService)(this)).BeginGetScenarioValue(scenarioId, callback, asyncState);
    }

    private object[] OnEndGetScenarioValue(System.IAsyncResult result)
    {
        string retVal = ((PyriteService)(this)).EndGetScenarioValue(result);
        return new object[] {
                retVal};
    }

    private void OnGetScenarioValueCompleted(object state)
    {
        if ((this.GetScenarioValueCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetScenarioValueCompleted(this, new GetScenarioValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void GetScenarioValueAsync(string scenarioId)
    {
        this.GetScenarioValueAsync(scenarioId, null);
    }

    public void GetScenarioValueAsync(string scenarioId, object userState)
    {
        if ((this.onBeginGetScenarioValueDelegate == null))
        {
            this.onBeginGetScenarioValueDelegate = new BeginOperationDelegate(this.OnBeginGetScenarioValue);
        }
        if ((this.onEndGetScenarioValueDelegate == null))
        {
            this.onEndGetScenarioValueDelegate = new EndOperationDelegate(this.OnEndGetScenarioValue);
        }
        if ((this.onGetScenarioValueCompletedDelegate == null))
        {
            this.onGetScenarioValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScenarioValueCompleted);
        }
        base.InvokeAsync(this.onBeginGetScenarioValueDelegate, new object[] {
                    scenarioId}, this.onEndGetScenarioValueDelegate, this.onGetScenarioValueCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult PyriteService.BeginIsScenarioValueChanged(string scenarioId, string lastKnownValue, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginIsScenarioValueChanged(scenarioId, lastKnownValue, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    bool PyriteService.EndIsScenarioValueChanged(System.IAsyncResult result)
    {
        return base.Channel.EndIsScenarioValueChanged(result);
    }

    private System.IAsyncResult OnBeginIsScenarioValueChanged(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string scenarioId = ((string)(inValues[0]));
        string lastKnownValue = ((string)(inValues[1]));
        return ((PyriteService)(this)).BeginIsScenarioValueChanged(scenarioId, lastKnownValue, callback, asyncState);
    }

    private object[] OnEndIsScenarioValueChanged(System.IAsyncResult result)
    {
        bool retVal = ((PyriteService)(this)).EndIsScenarioValueChanged(result);
        return new object[] {
                retVal};
    }

    private void OnIsScenarioValueChangedCompleted(object state)
    {
        if ((this.IsScenarioValueChangedCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.IsScenarioValueChangedCompleted(this, new IsScenarioValueChangedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void IsScenarioValueChangedAsync(string scenarioId, string lastKnownValue)
    {
        this.IsScenarioValueChangedAsync(scenarioId, lastKnownValue, null);
    }

    public void IsScenarioValueChangedAsync(string scenarioId, string lastKnownValue, object userState)
    {
        if ((this.onBeginIsScenarioValueChangedDelegate == null))
        {
            this.onBeginIsScenarioValueChangedDelegate = new BeginOperationDelegate(this.OnBeginIsScenarioValueChanged);
        }
        if ((this.onEndIsScenarioValueChangedDelegate == null))
        {
            this.onEndIsScenarioValueChangedDelegate = new EndOperationDelegate(this.OnEndIsScenarioValueChanged);
        }
        if ((this.onIsScenarioValueChangedCompletedDelegate == null))
        {
            this.onIsScenarioValueChangedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsScenarioValueChangedCompleted);
        }
        base.InvokeAsync(this.onBeginIsScenarioValueChangedDelegate, new object[] {
                    scenarioId,
                    lastKnownValue}, this.onEndIsScenarioValueChangedDelegate, this.onIsScenarioValueChangedCompletedDelegate, userState);
    }

    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }

    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }

    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void OpenAsync()
    {
        this.OpenAsync(null);
    }

    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }

    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }

    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }

    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void CloseAsync()
    {
        this.CloseAsync(null);
    }

    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }

    protected override PyriteService CreateChannel()
    {
        return new PyriteServiceClientChannel(this);
    }

    private class PyriteServiceClientChannel : ChannelBase<PyriteService>, PyriteService
    {

        public PyriteServiceClientChannel(System.ServiceModel.ClientBase<PyriteService> client) :
                base(client)
        {
        }

        public System.IAsyncResult BeginGetCurrentUser(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetCurrentUser", _args, callback, asyncState);
            return _result;
        }

        public Pyrite.MainDomain.UserBase EndGetCurrentUser(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            Pyrite.MainDomain.UserBase _result = ((Pyrite.MainDomain.UserBase)(base.EndInvoke("GetCurrentUser", _args, result)));
            return _result;
        }

        public System.IAsyncResult BeginCalculateScenarioValue(string scenarioId, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = scenarioId;
            System.IAsyncResult _result = base.BeginInvoke("CalculateScenarioValue", _args, callback, asyncState);
            return _result;
        }

        public string EndCalculateScenarioValue(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            string _result = ((string)(base.EndInvoke("CalculateScenarioValue", _args, result)));
            return _result;
        }

        public System.IAsyncResult BeginExecuteScenario(string scenarioId, string value, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = scenarioId;
            _args[1] = value;
            System.IAsyncResult _result = base.BeginInvoke("ExecuteScenario", _args, callback, asyncState);
            return _result;
        }

        public void EndExecuteScenario(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("ExecuteScenario", _args, result);
        }

        public System.IAsyncResult BeginExecuteScenarioAsync(string scenarioId, string value, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = scenarioId;
            _args[1] = value;
            System.IAsyncResult _result = base.BeginInvoke("ExecuteScenarioAsync", _args, callback, asyncState);
            return _result;
        }

        public void EndExecuteScenarioAsync(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("ExecuteScenarioAsync", _args, result);
        }

        public System.IAsyncResult BeginExecuteScenarioAsyncParallel(string scenarioId, string value, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = scenarioId;
            _args[1] = value;
            System.IAsyncResult _result = base.BeginInvoke("ExecuteScenarioAsyncParallel", _args, callback, asyncState);
            return _result;
        }

        public void EndExecuteScenarioAsyncParallel(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("ExecuteScenarioAsyncParallel", _args, result);
        }

        public System.IAsyncResult BeginGetChangedScenarios(System.DateTime since, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = since;
            System.IAsyncResult _result = base.BeginInvoke("GetChangedScenarios", _args, callback, asyncState);
            return _result;
        }

        public Pyrite.MainDomain.ScenarioInfoLW[] EndGetChangedScenarios(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            Pyrite.MainDomain.ScenarioInfoLW[] _result = ((Pyrite.MainDomain.ScenarioInfoLW[])(base.EndInvoke("GetChangedScenarios", _args, result)));
            return _result;
        }

        public System.IAsyncResult BeginGetScenarioInfo(string scenarioId, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = scenarioId;
            System.IAsyncResult _result = base.BeginInvoke("GetScenarioInfo", _args, callback, asyncState);
            return _result;
        }

        public Pyrite.MainDomain.ScenarioInfo EndGetScenarioInfo(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            Pyrite.MainDomain.ScenarioInfo _result = ((Pyrite.MainDomain.ScenarioInfo)(base.EndInvoke("GetScenarioInfo", _args, result)));
            return _result;
        }

        public System.IAsyncResult BeginGetScenariosInfo(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetScenariosInfo", _args, callback, asyncState);
            return _result;
        }

        public Pyrite.MainDomain.ScenarioInfo[] EndGetScenariosInfo(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            Pyrite.MainDomain.ScenarioInfo[] _result = ((Pyrite.MainDomain.ScenarioInfo[])(base.EndInvoke("GetScenariosInfo", _args, result)));
            return _result;
        }

        public System.IAsyncResult BeginGetScenarioValue(string scenarioId, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = scenarioId;
            System.IAsyncResult _result = base.BeginInvoke("GetScenarioValue", _args, callback, asyncState);
            return _result;
        }

        public string EndGetScenarioValue(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            string _result = ((string)(base.EndInvoke("GetScenarioValue", _args, result)));
            return _result;
        }

        public System.IAsyncResult BeginIsScenarioValueChanged(string scenarioId, string lastKnownValue, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = scenarioId;
            _args[1] = lastKnownValue;
            System.IAsyncResult _result = base.BeginInvoke("IsScenarioValueChanged", _args, callback, asyncState);
            return _result;
        }

        public bool EndIsScenarioValueChanged(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            bool _result = ((bool)(base.EndInvoke("IsScenarioValueChanged", _args, result)));
            return _result;
        }
    }
}
