//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lazurite.Windows.ServiceClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    using MainDomain;
    using MainDomain.MessageSecurity;
        
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServer")]
    public interface IServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/IsScenarioValueChanged", ReplyAction="http://tempuri.org/IServer/IsScenarioValueChangedResponse")]
        bool IsScenarioValueChanged(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId, Lazurite.MainDomain.MessageSecurity.Encrypted<string> lastKnownValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetScenariosInfo", ReplyAction="http://tempuri.org/IServer/GetScenariosInfoResponse")]
        EncryptedList<ScenarioInfo> GetScenariosInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetScenarioInfo", ReplyAction="http://tempuri.org/IServer/GetScenarioInfoResponse")]
        Lazurite.MainDomain.MessageSecurity.Encrypted<Lazurite.MainDomain.ScenarioInfo> GetScenarioInfo(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/CalculateScenarioValue", ReplyAction="http://tempuri.org/IServer/CalculateScenarioValueResponse")]
        Lazurite.MainDomain.MessageSecurity.Encrypted<string> CalculateScenarioValue(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetScenarioValue", ReplyAction="http://tempuri.org/IServer/GetScenarioValueResponse")]
        Lazurite.MainDomain.MessageSecurity.Encrypted<string> GetScenarioValue(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/ExecuteScenario", ReplyAction="http://tempuri.org/IServer/ExecuteScenarioResponse")]
        void ExecuteScenario(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId, Lazurite.MainDomain.MessageSecurity.Encrypted<string> value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/AsyncExecuteScenario", ReplyAction="http://tempuri.org/IServer/AsyncExecuteScenarioResponse")]
        void AsyncExecuteScenario(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId, Lazurite.MainDomain.MessageSecurity.Encrypted<string> value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/AsyncExecuteScenarioParallel", ReplyAction="http://tempuri.org/IServer/AsyncExecuteScenarioParallelResponse")]
        void AsyncExecuteScenarioParallel(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId, Lazurite.MainDomain.MessageSecurity.Encrypted<string> value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetChangedScenarios", ReplyAction="http://tempuri.org/IServer/GetChangedScenariosResponse")]
        EncryptedList<ScenarioInfoLW> GetChangedScenarios(System.DateTime since);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/SaveVisualSettings", ReplyAction="http://tempuri.org/IServer/SaveVisualSettingsResponse")]
        void SaveVisualSettings(Lazurite.MainDomain.MessageSecurity.Encrypted<Lazurite.MainDomain.UserVisualSettings> visualSettings);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerChannel : Lazurite.Windows.ServiceClient.ServiceReference.IServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerClient : System.ServiceModel.ClientBase<Lazurite.Windows.ServiceClient.ServiceReference.IServer>, Lazurite.Windows.ServiceClient.ServiceReference.IServer, MainDomain.IServer {
        
        public ServerClient() {
        }
        
        public ServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsScenarioValueChanged(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId, Lazurite.MainDomain.MessageSecurity.Encrypted<string> lastKnownValue) {
            return base.Channel.IsScenarioValueChanged(scenarioId, lastKnownValue);
        }
        
        public EncryptedList<ScenarioInfo> GetScenariosInfo() {
            return base.Channel.GetScenariosInfo();
        }
        
        public Lazurite.MainDomain.MessageSecurity.Encrypted<Lazurite.MainDomain.ScenarioInfo> GetScenarioInfo(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId) {
            return base.Channel.GetScenarioInfo(scenarioId);
        }
        
        public Lazurite.MainDomain.MessageSecurity.Encrypted<string> CalculateScenarioValue(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId) {
            return base.Channel.CalculateScenarioValue(scenarioId);
        }
        
        public Lazurite.MainDomain.MessageSecurity.Encrypted<string> GetScenarioValue(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId) {
            return base.Channel.GetScenarioValue(scenarioId);
        }
        
        public void ExecuteScenario(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId, Lazurite.MainDomain.MessageSecurity.Encrypted<string> value) {
            base.Channel.ExecuteScenario(scenarioId, value);
        }
        
        public void AsyncExecuteScenario(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId, Lazurite.MainDomain.MessageSecurity.Encrypted<string> value) {
            base.Channel.AsyncExecuteScenario(scenarioId, value);
        }
        
        public void AsyncExecuteScenarioParallel(Lazurite.MainDomain.MessageSecurity.Encrypted<string> scenarioId, Lazurite.MainDomain.MessageSecurity.Encrypted<string> value) {
            base.Channel.AsyncExecuteScenarioParallel(scenarioId, value);
        }
        
        public EncryptedList<ScenarioInfoLW> GetChangedScenarios(System.DateTime since) {
            return base.Channel.GetChangedScenarios(since);
        }
        
        public void SaveVisualSettings(Lazurite.MainDomain.MessageSecurity.Encrypted<Lazurite.MainDomain.UserVisualSettings> visualSettings) {
            base.Channel.SaveVisualSettings(visualSettings);
        }
    }
}
